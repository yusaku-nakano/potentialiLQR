import numpy as np
import matplotlib.pyplot as plt

import ilqr
from ilqr import split_agents, plot_solve

n_states = 4
n_controls = 2
n_agents = 7
x_dims = [n_states] * n_agents
u_dims = [n_controls] * n_agents
n_dims = [2] * n_agents

n_d = n_dims[0]

x0, xf = ilqr.random_setup(
    n_agents,
    n_states,
    is_rotation=False,
    rel_dist=2.0,
    var=n_agents / 2,
    n_d=2,
    random=True,
)

ilqr.eyeball_scenario(x0, xf, n_agents, n_states)
plt.show()

dt = 0.05
N = 60

tol = 1e-6
ids = [100 + i for i in range(n_agents)]

model = ilqr.UnicycleDynamics4D
dynamics = ilqr.MultiDynamicalModel([model(dt, id_) for id_ in ids])

Q = np.eye(4)
R = np.eye(2)
Qf = 1e3 * np.eye(n_states)
radius = 0.5

goal_costs = [
    ilqr.TrackingCost(xf_i, Q.copy(), R.copy(), Qf.copy(), id_)
    for xf_i, id_, x_dim, u_dim in zip(
        ilqr.split_agents_gen(xf, x_dims), ids, x_dims, u_dims
    )
]
prox_cost = ilqr.ProximityCost(x_dims, radius, n_dims)
goal_costs = [
    ilqr.TrackingCost(xf_i, Q.copy(), R.copy(), Qf.copy(), id_)
    for xf_i, id_ in zip(split_agents(xf.T, x_dims), ids)
]
prox_cost = ilqr.ProximityCost(x_dims, radius, n_dims)
game_cost = ilqr.GameCost(goal_costs, prox_cost)

problem = ilqr.ilqrProblem(dynamics, game_cost)
solver = ilqr.iLQR(problem, N)
us_init = np.random.randn(N, solver.nU)*0.0001
X, _, J = solver.run_ilqr(x0, tol=tol, t_kill=None)

plt.clf()
plot_solve(X, J, xf.T, x_dims, True, n_d)

plt.figure()
ilqr.plot_pairwise_distances(X, x_dims, n_dims, radius)

plt.show()

ilqr.make_trajectory_gif(f"{n_agents}-unicycles.gif", X, xf, x_dims, radius)